package com.enttribe.superapp.model;

import jakarta.persistence.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import com.enttribe.product.security.spring.userdetails.CustomerInfo;
import com.enttribe.core.generic.utils.ApplicationContextProvider;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import org.hibernate.envers.Audited;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */ 
// @Audited
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity 
@Setter
@Getter 
@NoArgsConstructor 
@AllArgsConstructor
@Table(name = "HOSTING_DETAILS")
@Filters(value = { @Filter(name = "hostingDetailsCustomerIdGtFilter", condition = "CUSTOMER_ID > :customerId"), @Filter(name = "hostingDetailsCustomerIdNInFilter", condition = "CUSTOMER_ID not in (:customerId)"), @Filter(name = "hostingDetailsCustomerIdLtEqFilter", condition = "CUSTOMER_ID <= :customerId"), @Filter(name = "hostingDetailsCustomerIdLtFilter", condition = "CUSTOMER_ID < :customerId"), @Filter(name = "hostingDetailsCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "hostingDetailsCustomerIdNEqFilter", condition = "CUSTOMER_ID != :customerId"), @Filter(name = "hostingDetailsCustomerIdInFilter", condition = "CUSTOMER_ID in (:customerId)"), @Filter(name = "hostingDetailsCustomerIdBwFilter", condition = "CUSTOMER_ID > :customerId_MIN  AND CUSTOMER_ID < :customerId_MAX"), @Filter(name = "hostingDetailsCustomerIdGtEqFilter", condition = "CUSTOMER_ID >= :customerId"), @Filter(name = "hostingDetailsCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "hostingDetailsDomainNInFilter", condition = "DOMAIN not in (:domain)"), @Filter(name = "hostingDetailsDomainEqFilter", condition = "DOMAIN = :domain"), @Filter(name = "hostingDetailsDomainNEqFilter", condition = "DOMAIN != :domain"), @Filter(name = "hostingDetailsDomainInFilter", condition = "DOMAIN in (:domain)"), @Filter(name = "hostingDetailsEnvironmentNInFilter", condition = "ENVIRONMENT not in (:environment)"), @Filter(name = "hostingDetailsEnvironmentEqFilter", condition = "ENVIRONMENT = :environment"), @Filter(name = "hostingDetailsEnvironmentNEqFilter", condition = "ENVIRONMENT != :environment"), @Filter(name = "hostingDetailsEnvironmentInFilter", condition = "ENVIRONMENT in (:environment)"), @Filter(name = "hostingDetailsIdGtFilter", condition = "ID > :id"), @Filter(name = "hostingDetailsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "hostingDetailsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "hostingDetailsIdLtFilter", condition = "ID < :id"), @Filter(name = "hostingDetailsIdEqFilter", condition = "ID = :id"), @Filter(name = "hostingDetailsIdNEqFilter", condition = "ID != :id"), @Filter(name = "hostingDetailsIdInFilter", condition = "ID in (:id)"), @Filter(name = "hostingDetailsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "hostingDetailsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "hostingDetailsIdEqFilter", condition = "ID = :id"), @Filter(name = "hostingDetailsMiniappDetailsTaggingNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.TAGGING not in (:tagging)"), @Filter(name = "hostingDetailsMiniappDetailsTaggingEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.TAGGING = :tagging)"), @Filter(name = "hostingDetailsMiniappDetailsTaggingNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.TAGGING != :tagging)"), @Filter(name = "hostingDetailsMiniappDetailsTaggingInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.TAGGING in (:tagging)"), @Filter(name = "hostingDetailsMiniappDetailsNameNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAIhostingDetailsMiniappDetailsNameEqFilterLS where MINIAPP_DETAILS.NAME not in (:name)"), @Filter(name = "", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.NAME = :name)"), @Filter(name = "hostingDetailsMiniappDetailsNameNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.NAME != :name)"), @Filter(name = "hostingDetailsMiniappDetailsNameInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.NAME in (:name)"), @Filter(name = "hostingDetailsMiniappDetailsApplicationKeyNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.APPLICATION_KEY not in (:applicationKey)"), @Filter(name = "hostingDetailsMiniappDetailsApplicationKeyEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.APPLICATION_KEY = :applicationKey)"), @Filter(name = "hostingDetailsMiniappDetailsApplicationKeyNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.APPLICATION_KEY != :applicationKey)"), @Filter(name = "hostingDetailsMiniappDetailsApplicationKeyInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.APPLICATION_KEY in (:applicationKey)"), @Filter(name = "hostingDetailsMiniappDetailsDescriptionNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.DESCRIPTION not in (:description)"), @Filter(name = "hostingDetailsMiniappDetailsDescriptionEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.DESCRIPTION = :description)"), @Filter(name = "hostingDetailsMiniappDetailsDescriptionNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.DESCRIPTION != :description)"), @Filter(name = "hostingDetailsMiniappDetailsDescriptionInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.DESCRIPTION in (:description)"), @Filter(name = "hostingDetailsMiniappDetailsIconUrlNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ICON_URL not in (:iconUrl)"), @Filter(name = "hostingDetailsMiniappDetailsIconUrlEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ICON_URL = :iconUrl)"), @Filter(name = "hostingDetailsMiniappDetailsIconUrlNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ICON_URL != :iconUrl)"), @Filter(name = "hostingDetailsMiniappDetailsIconUrlInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ICON_URL in (:iconUrl)"), @Filter(name = "hostingDetailsMiniappDetailsIdGtFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID > :id)"), @Filter(name = "hostingDetailsMiniappDetailsIdNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID not in (:id)"), @Filter(name = "hostingDetailsMiniappDetailsIdLtEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID <= :id)"), @Filter(name = "hostingDetailsMiniappDetailsIdLtFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID < :id)"), @Filter(name = "hostingDetailsMiniappDetailsIdEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID = :id)"), @Filter(name = "hostingDetailsMiniappDetailsIdNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID != :id)"), @Filter(name = "hostingDetailsMiniappDetailsIdInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID in (:id)"), @Filter(name = "hostingDetailsMiniappDetailsIdBwFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID > :id_MIN  AND MINIAPP_DETAILS.ID < :id_MAX )"), @Filter(name = "hostingDetailsMiniappDetailsIdGtEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.ID >= :id)"), @Filter(name = "hostingDetailsMiniappDetailsVersionNInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.VERSION not in (:version)"), @Filter(name = "hostingDetailsMiniappDetailsVersionEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.VERSION = :version)"), @Filter(name = "hostingDetailsMiniappDetailsVersionNEqFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.VERSION != :version)"), @Filter(name = "hostingDetailsMiniappDetailsVersionInFilter", condition = "APP_ID in (select MINIAPP_DETAILS.id from MINIAPP_DETAILS where MINIAPP_DETAILS.VERSION in (:version)"), @Filter(name = "hostingDetailsSslCertificateNInFilter", condition = "SSL_CERTIFICATE not in (:sslCertificate)"), @Filter(name = "hostingDetailsSslCertificateEqFilter", condition = "SSL_CERTIFICATE = :sslCertificate"), @Filter(name = "hostingDetailsSslCertificateNEqFilter", condition = "SSL_CERTIFICATE != :sslCertificate"), @Filter(name = "hostingDetailsSslCertificateInFilter", condition = "SSL_CERTIFICATE in (:sslCertificate)") })
@FilterDefs(value = { @FilterDef(name = "hostingDetailsCustomerIdGtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdNInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdLtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdLtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdNEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdBwFilter", parameters = { @ParamDef(name = "customerId_MIN", type = Integer.class), @ParamDef(name = "customerId_MAX", type = Integer.class) }), @FilterDef(name = "hostingDetailsCustomerIdGtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "hostingDetailsDomainNInFilter", parameters = { @ParamDef(name = "domain", type = String.class) }), @FilterDef(name = "hostingDetailsDomainEqFilter", parameters = { @ParamDef(name = "domain", type = String.class) }), @FilterDef(name = "hostingDetailsDomainNEqFilter", parameters = { @ParamDef(name = "domain", type = String.class) }), @FilterDef(name = "hostingDetailsDomainInFilter", parameters = { @ParamDef(name = "domain", type = String.class) }), @FilterDef(name = "hostingDetailsEnvironmentNInFilter", parameters = { @ParamDef(name = "environment", type = String.class) }), @FilterDef(name = "hostingDetailsEnvironmentEqFilter", parameters = { @ParamDef(name = "environment", type = String.class) }), @FilterDef(name = "hostingDetailsEnvironmentNEqFilter", parameters = { @ParamDef(name = "environment", type = String.class) }), @FilterDef(name = "hostingDetailsEnvironmentInFilter", parameters = { @ParamDef(name = "environment", type = String.class) }), @FilterDef(name = "hostingDetailsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "hostingDetailsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsTaggingNInFilter", parameters = { @ParamDef(name = "tagging", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsTaggingEqFilter", parameters = { @ParamDef(name = "tagging", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsTaggingNEqFilter", parameters = { @ParamDef(name = "tagging", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsTaggingInFilter", parameters = { @ParamDef(name = "tagging", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsApplicationKeyNInFilter", parameters = { @ParamDef(name = "applicationKey", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsApplicationKeyEqFilter", parameters = { @ParamDef(name = "applicationKey", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsApplicationKeyNEqFilter", parameters = { @ParamDef(name = "applicationKey", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsApplicationKeyInFilter", parameters = { @ParamDef(name = "applicationKey", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIconUrlNInFilter", parameters = { @ParamDef(name = "iconUrl", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIconUrlEqFilter", parameters = { @ParamDef(name = "iconUrl", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIconUrlNEqFilter", parameters = { @ParamDef(name = "iconUrl", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIconUrlInFilter", parameters = { @ParamDef(name = "iconUrl", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsVersionNInFilter", parameters = { @ParamDef(name = "version", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsVersionEqFilter", parameters = { @ParamDef(name = "version", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsVersionNEqFilter", parameters = { @ParamDef(name = "version", type = String.class) }), @FilterDef(name = "hostingDetailsMiniappDetailsVersionInFilter", parameters = { @ParamDef(name = "version", type = String.class) }), @FilterDef(name = "hostingDetailsSslCertificateNInFilter", parameters = { @ParamDef(name = "sslCertificate", type = String.class) }), @FilterDef(name = "hostingDetailsSslCertificateEqFilter", parameters = { @ParamDef(name = "sslCertificate", type = String.class) }), @FilterDef(name = "hostingDetailsSslCertificateNEqFilter", parameters = { @ParamDef(name = "sslCertificate", type = String.class) }), @FilterDef(name = "hostingDetailsSslCertificateInFilter", parameters = { @ParamDef(name = "sslCertificate", type = String.class) }) })
public class HostingDetails extends BaseEntity {

    @Basic
    @Column(name = "CUSTOMER_ID", columnDefinition = "INT")
    private Integer customerId;

    @Basic
    private boolean deleted;

    @Size(max = 255)
    @Basic
    private String domain;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String environment;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "APP_ID", columnDefinition = "INT")
    private MiniappDetails miniappDetails;

    @Basic
    @Column(name = "SSL_CERTIFICATE", columnDefinition = "LONGTEXT")
    private String sslCertificate;

}
